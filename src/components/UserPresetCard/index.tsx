import React from 'react';
import { toast, ToastOptions } from 'react-toastify';
import PresetsProductSmallCard from '../PresetsCreateProductCard/PresetsProductSmallCard';
import Dropdown from '../UI/Dropdown';
import { UserPreset } from '../../types/UserPreset';

import {
  useDeleteUserPresetMutation,
  useUpdateUserPresetMutation,
} from '../../store/services/userPresets';
import {
  autoOrderDaysList,
  checkTime,
  getAutoOrderDays,
  getProductsAmountByType,
  toastOptions,
} from '../../helpers';

import styles from './UserPresetCard.module.scss';

interface UserPresetCardProps {
  preset: UserPreset;
  presets: UserPreset[] | [];
  setPresets: (presets: UserPreset[]) => void;
}

const UserPresetCard: React.FC<UserPresetCardProps> = ({ preset, setPresets, presets }) => {
  const { title, auto, day, price, products, time, _id } = preset;
  const [updateUserPreset] = useUpdateUserPresetMutation();
  const [deleteUserPreset] = useDeleteUserPresetMutation();
  const [drinksAmount, snaksAmount] = getProductsAmountByType(products);

  const [popupActive, setPopupActive] = React.useState(false);

  const [autoSettings, setAutoSettings] = React.useState({
    day,
    time,
    auto,
  });

  const normalizeAuto =
    autoSettings.auto === 0
      ? 'Без автозаказа'
      : `${getAutoOrderDays(autoSettings.day)}, ${autoSettings.time}`;

  const closePopupHandler = () => {
    toast.success('Изменения внесены успешно', toastOptions);
    setPopupActive(false);
  };

  const updateUserPresetHandler = () => {
    if (checkTime(autoSettings.time)) {
      const changes = { auto: 1, day: autoSettings.day, time: autoSettings.time };
      updateUserPreset({ _id, changes });
      setAutoSettings({ ...autoSettings, auto: 1 });
      closePopupHandler();
    } else {
      toast.error('Укажите время в валидном формате', toastOptions);
    }
  };

  const deleteUserPresetHandler = () => {
    deleteUserPreset(_id);
    setPresets([...presets.filter((item) => item._id !== _id)]);
    closePopupHandler();
  };

  const removeAutoHandler = () => {
    const changes = { auto: 0, day: 0, time: '' };
    updateUserPreset({ _id, changes });
    setAutoSettings(changes);
    closePopupHandler();
  };

  const changeDay = (id: number) => {
    setAutoSettings({ ...autoSettings, day: id });
  };

  return (
    <div className={styles.preset}>
      <div className={styles.top}>
        <h2>{title}</h2>
        <div className={styles.amount}>
          <p>
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg">
              <path
                d="M19.7499 2.33C19.6553 2.22515 19.5395 2.14153 19.4102 2.08465C19.281 2.02778 19.1411 1.99892 18.9999 2H4.99989C4.85867 1.99892 4.71881 2.02778 4.58954 2.08465C4.46027 2.14153 4.34451 2.22515 4.24989 2.33C4.15553 2.435 4.08446 2.55879 4.04137 2.69323C3.99828 2.82767 3.98415 2.9697 3.99989 3.11L5.79989 19.33C5.88146 20.0672 6.2332 20.748 6.78721 21.241C7.34123 21.7341 8.05825 22.0045 8.79989 22H15.2199C15.9615 22.0045 16.6786 21.7341 17.2326 21.241C17.7866 20.748 18.1383 20.0672 18.2199 19.33L19.9999 3.11C20.0156 2.9697 20.0015 2.82767 19.9584 2.69323C19.9153 2.55879 19.8443 2.435 19.7499 2.33ZM16.1999 19.11C16.1727 19.3557 16.0555 19.5827 15.8708 19.747C15.6861 19.9114 15.4471 20.0015 15.1999 20H8.78989C8.54268 20.0015 8.30367 19.9114 8.119 19.747C7.93433 19.5827 7.81708 19.3557 7.78989 19.11L6.77989 10H17.2199L16.1999 19.11ZM17.4399 8H6.55989L6.11989 4H17.8799L17.4399 8Z"
                fill="#A3A3A3"
              />
            </svg>
            {drinksAmount}
          </p>
          <p>
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg">
              <path
                d="M19 2C18.7348 2 18.4804 2.10536 18.2929 2.29289C18.1054 2.48043 18 2.73478 18 3V8.46L17 9.13V3C17 2.73478 16.8946 2.48043 16.7071 2.29289C16.5196 2.10536 16.2652 2 16 2C15.7348 2 15.4804 2.10536 15.2929 2.29289C15.1054 2.48043 15 2.73478 15 3V9.13L14 8.46V3C14 2.73478 13.8946 2.48043 13.7071 2.29289C13.5196 2.10536 13.2652 2 13 2C12.7348 2 12.4804 2.10536 12.2929 2.29289C12.1054 2.48043 12 2.73478 12 3V9C12.0009 9.16471 12.0424 9.32665 12.1209 9.47145C12.1994 9.61625 12.3124 9.73941 12.45 9.83L15 11.54V21C15 21.2652 15.1054 21.5196 15.2929 21.7071C15.4804 21.8946 15.7348 22 16 22C16.2652 22 16.5196 21.8946 16.7071 21.7071C16.8946 21.5196 17 21.2652 17 21V11.54L19.55 9.83C19.6876 9.73941 19.8006 9.61625 19.8791 9.47145C19.9576 9.32665 19.9991 9.16471 20 9V3C20 2.73478 19.8946 2.48043 19.7071 2.29289C19.5196 2.10536 19.2652 2 19 2ZM9 2C7.67392 2 6.40215 2.52678 5.46447 3.46447C4.52678 4.40215 4 5.67392 4 7V13C4 13.2652 4.10536 13.5196 4.29289 13.7071C4.48043 13.8946 4.73478 14 5 14H8V21C8 21.2652 8.10536 21.5196 8.29289 21.7071C8.48043 21.8946 8.73478 22 9 22C9.26522 22 9.51957 21.8946 9.70711 21.7071C9.89464 21.5196 10 21.2652 10 21V3C10 2.73478 9.89464 2.48043 9.70711 2.29289C9.51957 2.10536 9.26522 2 9 2ZM8 12H6V7C5.99967 6.37935 6.19186 5.77387 6.55006 5.26702C6.90826 4.76016 7.41484 4.37688 8 4.17V12Z"
                fill="#A3A3A3"
              />
            </svg>
            {snaksAmount}
          </p>
        </div>
        <div className={styles.auto}>
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <path
              d="M11 2C9.02219 2 7.08879 2.58649 5.4443 3.6853C3.79981 4.78412 2.51809 6.3459 1.76121 8.17317C1.00433 10.0004 0.806299 12.0111 1.19215 13.9509C1.578 15.8907 2.53041 17.6725 3.92894 19.0711C5.32746 20.4696 7.10929 21.422 9.0491 21.8079C10.9889 22.1937 12.9996 21.9957 14.8268 21.2388C16.6541 20.4819 18.2159 19.2002 19.3147 17.5557C20.4135 15.9112 21 13.9778 21 12C21 10.6868 20.7413 9.38642 20.2388 8.17317C19.7363 6.95991 18.9997 5.85752 18.0711 4.92893C17.1425 4.00035 16.0401 3.26375 14.8268 2.7612C13.6136 2.25866 12.3132 2 11 2V2ZM11 20C9.41775 20 7.87104 19.5308 6.55544 18.6518C5.23985 17.7727 4.21447 16.5233 3.60897 15.0615C3.00347 13.5997 2.84504 11.9911 3.15372 10.4393C3.4624 8.88743 4.22433 7.46197 5.34315 6.34315C6.46197 5.22433 7.88743 4.4624 9.43928 4.15372C10.9911 3.84504 12.5997 4.00346 14.0615 4.60896C15.5233 5.21447 16.7727 6.23984 17.6518 7.55544C18.5308 8.87103 19 10.4177 19 12C19 14.1217 18.1572 16.1566 16.6569 17.6569C15.1566 19.1571 13.1217 20 11 20V20ZM14.1 12.63L12 11.42V7C12 6.73478 11.8946 6.48043 11.7071 6.29289C11.5196 6.10536 11.2652 6 11 6C10.7348 6 10.4804 6.10536 10.2929 6.29289C10.1054 6.48043 10 6.73478 10 7V12C10 12 10 12.08 10 12.12C10.0059 12.1889 10.0228 12.2564 10.05 12.32C10.0706 12.3793 10.0974 12.4363 10.13 12.49C10.1574 12.5468 10.1909 12.6005 10.23 12.65L10.39 12.78L10.48 12.87L13.08 14.37C13.2324 14.4564 13.4048 14.5012 13.58 14.5C13.8014 14.5015 14.0171 14.4296 14.1932 14.2953C14.3693 14.1611 14.4959 13.9722 14.5531 13.7583C14.6103 13.5444 14.5948 13.3176 14.5092 13.1134C14.4236 12.9092 14.2726 12.7392 14.08 12.63H14.1Z"
              fill="#A3A3A3"
            />
          </svg>
          {normalizeAuto}
        </div>
      </div>
      <div className={styles.products}>
        {products.map((product) => (
          <PresetsProductSmallCard key={product._id} product={product} />
        ))}
      </div>
      <div className={styles.bottom}>
        <div className={styles.price}>
          {price} <span>₽</span>
        </div>
        <button className={styles.button}>В корзину</button>
      </div>
      <button className={styles.settings} onClick={() => setPopupActive(!popupActive)}>
        <svg
          width="20"
          height="20"
          viewBox="0 0 20 20"
          fill="none"
          xmlns="http://www.w3.org/2000/svg">
          <path
            d="M17.7665 7.95833L16.1915 7.43333L16.9332 5.94999C17.0084 5.79473 17.0335 5.61996 17.0051 5.4498C16.9768 5.27964 16.8963 5.12248 16.7748 4.99999L14.9998 3.22499C14.8767 3.10173 14.718 3.02016 14.5461 2.99176C14.3742 2.96336 14.1977 2.98956 14.0415 3.06666L12.5582 3.80833L12.0332 2.23333C11.9777 2.06915 11.8725 1.92635 11.7321 1.82478C11.5917 1.72322 11.4231 1.66795 11.2498 1.66666H8.74984C8.57514 1.66621 8.40471 1.72068 8.26265 1.82236C8.12059 1.92405 8.01408 2.06781 7.95817 2.23333L7.43317 3.80833L5.94984 3.06666C5.79458 2.99148 5.61981 2.96633 5.44965 2.99469C5.27949 3.02305 5.12233 3.10352 4.99984 3.22499L3.22484 4.99999C3.10158 5.12313 3.02001 5.28181 2.99161 5.45371C2.96321 5.62561 2.9894 5.80208 3.06651 5.95833L3.80817 7.44166L2.23317 7.96666C2.069 8.02211 1.92619 8.12735 1.82463 8.26775C1.72307 8.40815 1.66779 8.57671 1.66651 8.74999V11.25C1.66606 11.4247 1.72052 11.5951 1.82221 11.7372C1.92389 11.8792 2.06766 11.9858 2.23317 12.0417L3.80817 12.5667L3.06651 14.05C2.99132 14.2053 2.96618 14.38 2.99454 14.5502C3.0229 14.7203 3.10337 14.8775 3.22484 15L4.99984 16.775C5.12298 16.8983 5.28165 16.9798 5.45355 17.0082C5.62545 17.0366 5.80193 17.0104 5.95817 16.9333L7.44151 16.1917L7.96651 17.7667C8.02241 17.9322 8.12892 18.0759 8.27098 18.1776C8.41304 18.2793 8.58347 18.3338 8.75817 18.3333H11.2582C11.4329 18.3338 11.6033 18.2793 11.7454 18.1776C11.8874 18.0759 11.9939 17.9322 12.0498 17.7667L12.5748 16.1917L14.0582 16.9333C14.2124 17.0066 14.3855 17.0307 14.5539 17.0024C14.7224 16.9741 14.878 16.8947 14.9998 16.775L16.7748 15C16.8981 14.8769 16.9797 14.7182 17.0081 14.5463C17.0365 14.3744 17.0103 14.1979 16.9332 14.0417L16.1915 12.5583L17.7665 12.0333C17.9307 11.9779 18.0735 11.8726 18.1751 11.7322C18.2766 11.5918 18.3319 11.4233 18.3332 11.25V8.74999C18.3336 8.57529 18.2792 8.40486 18.1775 8.2628C18.0758 8.12074 17.932 8.01423 17.7665 7.95833ZM16.6665 10.65L15.6665 10.9833C15.4366 11.0579 15.2256 11.1816 15.0482 11.3459C14.8709 11.5102 14.7314 11.7111 14.6394 11.9346C14.5474 12.1582 14.5052 12.3991 14.5156 12.6406C14.5261 12.8822 14.5889 13.1185 14.6998 13.3333L15.1748 14.2833L14.2582 15.2L13.3332 14.7C13.1195 14.5935 12.8854 14.5342 12.6468 14.5261C12.4081 14.5179 12.1706 14.5612 11.9501 14.6528C11.7296 14.7445 11.5314 14.8824 11.3689 15.0574C11.2064 15.2323 11.0834 15.4401 11.0082 15.6667L10.6748 16.6667H9.34984L9.01651 15.6667C8.94192 15.4367 8.81819 15.2257 8.65392 15.0484C8.48965 14.871 8.28876 14.7315 8.06519 14.6395C7.84162 14.5476 7.60072 14.5054 7.35919 14.5158C7.11767 14.5262 6.88131 14.5891 6.66651 14.7L5.71651 15.175L4.79984 14.2583L5.29984 13.3333C5.41075 13.1185 5.47361 12.8822 5.48404 12.6406C5.49448 12.3991 5.45225 12.1582 5.36029 11.9346C5.26832 11.7111 5.12882 11.5102 4.95146 11.3459C4.7741 11.1816 4.56313 11.0579 4.33317 10.9833L3.33317 10.65V9.34999L4.33317 9.01666C4.56313 8.94207 4.7741 8.81835 4.95146 8.65408C5.12882 8.4898 5.26832 8.28891 5.36029 8.06534C5.45225 7.84177 5.49448 7.60087 5.48404 7.35935C5.47361 7.11782 5.41075 6.88146 5.29984 6.66666L4.82484 5.74166L5.74151 4.82499L6.66651 5.29999C6.88131 5.4109 7.11767 5.47376 7.35919 5.4842C7.60072 5.49464 7.84162 5.45241 8.06519 5.36044C8.28876 5.26848 8.48965 5.12897 8.65392 4.95161C8.81819 4.77425 8.94192 4.56328 9.01651 4.33333L9.34984 3.33333H10.6498L10.9832 4.33333C11.0578 4.56328 11.1815 4.77425 11.3458 4.95161C11.51 5.12897 11.7109 5.26848 11.9345 5.36044C12.1581 5.45241 12.399 5.49464 12.6405 5.4842C12.882 5.47376 13.1184 5.4109 13.3332 5.29999L14.2832 4.82499L15.1998 5.74166L14.6998 6.66666C14.5934 6.88036 14.5341 7.11445 14.5259 7.35307C14.5178 7.59169 14.561 7.82927 14.6527 8.04973C14.7443 8.27019 14.8823 8.46838 15.0572 8.63089C15.2321 8.7934 15.4399 8.91643 15.6665 8.99166L16.6665 9.32499V10.65ZM9.99984 6.66666C9.34057 6.66666 8.6961 6.86216 8.14794 7.22843C7.59978 7.5947 7.17253 8.11529 6.92024 8.72438C6.66795 9.33347 6.60194 10.0037 6.73056 10.6503C6.85917 11.2969 7.17664 11.8908 7.64282 12.357C8.10899 12.8232 8.70294 13.1407 9.34954 13.2693C9.99614 13.3979 10.6664 13.3319 11.2755 13.0796C11.8845 12.8273 12.4051 12.4001 12.7714 11.8519C13.1377 11.3037 13.3332 10.6593 13.3332 9.99999C13.3332 9.11594 12.982 8.26809 12.3569 7.64297C11.7317 7.01785 10.8839 6.66666 9.99984 6.66666V6.66666ZM9.99984 11.6667C9.6702 11.6667 9.34797 11.5689 9.07389 11.3858C8.79981 11.2026 8.58619 10.9423 8.46004 10.6378C8.33389 10.3333 8.30089 9.99814 8.3652 9.67484C8.42951 9.35154 8.58824 9.05457 8.82133 8.82148C9.05442 8.58839 9.35139 8.42966 9.67469 8.36535C9.99799 8.30104 10.3331 8.33405 10.6376 8.46019C10.9422 8.58634 11.2025 8.79996 11.3856 9.07404C11.5688 9.34812 11.6665 9.67036 11.6665 9.99999C11.6665 10.442 11.4909 10.8659 11.1784 11.1785C10.8658 11.4911 10.4419 11.6667 9.99984 11.6667Z"
            fill="#202020"
          />
        </svg>
      </button>
      {popupActive && (
        <div className={styles.popup}>
          <h3>Настройки</h3>
          <Dropdown
            activeElement={autoSettings.day}
            setActiveElement={changeDay}
            isDropdownSm
            items={autoOrderDaysList}
          />
          <input
            type="text"
            value={autoSettings.time}
            placeholder="Укажите время доставки.."
            onChange={(e) => setAutoSettings({ ...autoSettings, time: e.target.value })}
          />
          <button className={styles.success} onClick={updateUserPresetHandler}>
            Сохранить
          </button>
          <button className={styles.cancel} onClick={removeAutoHandler}>
            Отключить автозаказ
          </button>
          <button className={styles.cancel} onClick={deleteUserPresetHandler}>
            Удалить
          </button>
        </div>
      )}
    </div>
  );
};

export default UserPresetCard;
